import { Injectable } from '@angular/core';
import { Auth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged, User, UserCredential } from '@angular/fire/auth';
import { Observable, from } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  user$!: Observable<User | null>;  // Public (fix TS2341) ; ! non-null post-constructor

  constructor(private auth: Auth) {
    this.user$ = new Observable<User | null>(observer => {
      const unsubscribe = onAuthStateChanged(this.auth, (user) => {
        observer.next(user);
      });
      return () => unsubscribe();
    });
  }

  signIn(email: string, password: string): Promise<UserCredential> {
    return signInWithEmailAndPassword(this.auth, email, password);
  }

  login(email: string, password: string): Promise<UserCredential> {
    return this.signIn(email, password);  // Alias pour compat (fix TS2339 'login' absent)
  }

  register(email: string, password: string): Promise<UserCredential> {
    return createUserWithEmailAndPassword(this.auth, email, password);
  }

  logout(): Promise<void> {
    return signOut(this.auth);
  }

  logout$(): Observable<void> {
    return from(this.logout());  // Wrap pour .subscribe (fix TS2339 subscribe sur Promise)
  }

  getCurrentUser(): Observable<User | null> {
    return this.user$;
  }
}
