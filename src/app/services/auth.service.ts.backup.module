import { Injectable } from '@angular/core';
import { Auth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged, User, UserCredential } from '@angular/fire/auth';
import { Observable } from 'rxjs';
import { from } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  user$!: Observable<User | null>;

  constructor(private auth: Auth) {
    this.user$ = new Observable(observer => {
      const unsubscribe = onAuthStateChanged(this.auth, user => observer.next(user));
      return unsubscribe;
    });
  }

  signIn(email: string, password: string): Promise<UserCredential> {
    return signInWithEmailAndPassword(this.auth, email, password);
  }

  login(email: string, password: string): Promise<UserCredential> {
    return this.signIn(email, password);
  }

  register(email: string, password: string): Promise<UserCredential> {
    return createUserWithEmailAndPassword(this.auth, email, password);
  }

  logout(): Promise<void> {
    return signOut(this.auth);
  }

  logout$(): Observable<void> {
    return from(this.logout());
  }

  getCurrentUser(): Observable<User | null> {
    return this.user$;
  }
}
