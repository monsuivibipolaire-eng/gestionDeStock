import { Injectable } from '@angular/core';
import { Firestore, collection, addDoc, updateDoc, deleteDoc, doc, query, collectionData, Query } from '@angular/fire/firestore';  // Imports modulaire : query ajouté pour fix
import { Observable } from 'rxjs';
import { Product } from '../models/product';  // Interface : { id?: string; name: string; price: number; quantity: number; description?: string; }

@Injectable({
  providedIn: 'root'
})
export class ProductsService {
  constructor(private firestore: Firestore) {}

  getProducts(): Observable<Product[]> {
    const productsRef = collection(this.firestore, 'products');
    const q: Query = query(productsRef);  // Fix clé : Wrapper CollectionReference en Query (même pour all docs ; requis pour collectionData v9+)
    return collectionData(q, { idField: 'id' }) as Observable<Product[]>;  // idField auto-ajoute id ; cast types stricts (no TS errors)
  }

  addProduct(product: Omit<Product, 'id'>): Promise<void> {
    const productsRef = collection(this.firestore, 'products');
    return addDoc(productsRef, product).then(() => {});  // Promise<void> pour .then() en component (id généré auto)
  }

  updateProduct(id: string, product: Partial<Product>): Promise<void> {
    const productRef = doc(this.firestore, 'products', id);
    return updateDoc(productRef, product);  // Partial pour updates partielles (e.g., name seulement)
  }

  deleteProduct(id: string): Promise<void> {
    const productRef = doc(this.firestore, 'products', id);
    return deleteDoc(productRef);
  }
}
