import { Injectable } from '@angular/core';
import { Firestore, collection, addDoc, updateDoc, deleteDoc, doc, query, collectionData, Query, orderBy, Timestamp } from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { EntryVoucher } from '../models/entry-voucher';

@Injectable({
  providedIn: 'root'
})
export class EntryVoucherService {
  constructor(private firestore: Firestore) {}

  getEntryVouchers(): Observable<EntryVoucher[]> {
    const vouchersRef = collection(this.firestore, 'entryVouchers');
    const q: Query = query(vouchersRef, orderBy('date', 'desc'));  // Tri par date d√©croissante
    return collectionData(q, { idField: 'id' }) as Observable<EntryVoucher[]>;
  }

  addEntryVoucher(voucher: Omit<EntryVoucher, 'id' | 'createdAt'>): Promise<void> {
    const vouchersRef = collection(this.firestore, 'entryVouchers');
    const voucherData = {
      ...voucher,
      createdAt: Timestamp.now(),  // Timestamp auto
      total: voucher.quantity * voucher.unitPrice  // Calcul total
    };
    return addDoc(vouchersRef, voucherData).then(() => {});
  }

  updateEntryVoucher(id: string, voucher: Partial<EntryVoucher>): Promise<void> {
    const voucherRef = doc(this.firestore, 'entryVouchers', id);
    const updateData = { ...voucher };
    if (voucher.quantity && voucher.unitPrice) {
      updateData.total = voucher.quantity * voucher.unitPrice;  // Recalcul total si modif
    }
    return updateDoc(voucherRef, updateData);
  }

  deleteEntryVoucher(id: string): Promise<void> {
    const voucherRef = doc(this.firestore, 'entryVouchers', id);
    return deleteDoc(voucherRef);
  }
}
