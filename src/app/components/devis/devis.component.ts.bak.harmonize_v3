import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, ReactiveFormsModule, Validators } from '@angular/forms';
import { FormsModule } from '@angular/forms';
import { Observable, BehaviorSubject, combineLatest } from 'rxjs';
import { map, take } from 'rxjs/operators';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { Timestamp } from '@angular/fire/firestore';
import { NgSelectModule } from '@ng-select/ng-select';
import { Devis, ProductLine } from "../../models/devis";
import { DevisService } from '../../services/devis.service';
import { ProductsService } from '../../services/products.service';
import { CustomersService } from '../../services/customers.service';
import { Product } from '../../models/product';
import { Customer } from '../../models/customer';

@Component({
  selector: 'app-devis',
  templateUrl: './devis.component.html',
  styleUrls: ['./devis.component.scss'],
  imports: [ReactiveFormsModule, NgSelectModule, CommonModule, FormsModule],
  standalone: true
})
export class DevisComponent implements OnInit {
  devisList$!: Observable<Devis[]>;
  filteredDevis$!: Observable<Devis[]>;
  products$!: Observable<Product[]>;
  productList: Product[] = []; // Cache synchrone  customers$!: Observable<Customer[]>;
  devisForm: FormGroup;
  isLoading = false;
  isEditing = false;
  editingId: string | null = null;
  errorMessage = '';
  showForm = false;
  expandedDevisId: string | null = null;
  formatDate(timestamp: Timestamp | Date): string {
    if (timestamp instanceof Timestamp) {
      return timestamp.toDate().toLocaleDateString('fr-FR');
          

          getProductName(productId: string): string {
            const product = this.productList.find(p => p.id === productId);
            return product ? product.name : "Produit_Inconnu";
                

                toggleExpand(itemId: string): void {
                  this.expandedDevisId = this.expandedDevisId === itemId ? null : itemId;
                }
              
          }
          

          getDescription(productId: string): string {
            const prod = this.productList.find(p => p.id === productId);
            return prod?.description || "Pas_de_description";
          }
          

          getSubtotal(line: any): number {
            const quantity = line && typeof line.quantity === "number" ? line.quantity : 0;
            const unitPrice = line && typeof line.unitPrice === "number" ? line.unitPrice : 0;
            return quantity * unitPrice;
          }
        
    }
    return new Date(timestamp).toLocaleDateString('fr-FR');
  }

  getStatusLabel(status: string): string {
    const labels: any = {
      draft: 'Brouillon',
      sent: 'Envoyé',
      accepted: 'Accepté',
      rejected: 'Rejeté'
    };
    return labels[status] || status;
  }

  getStatusClass(status: string): string {
    const classes: any = {
      draft: 'bg-gray-100 text-gray-800',
      sent: 'bg-blue-100 text-blue-800',
      accepted: 'bg-green-100 text-green-800',
      rejected: 'bg-red-100 text-red-800'
    };
    return classes[status] || 'bg-gray-100 text-gray-800';
  }

  printList(): void {
    this.filteredDevis$.pipe(take(1)).subscribe(devisList => {
      if (devisList.length === 0) {
        alert('Aucun devis à imprimer.');
        return;
      }
      this.generatePrintHTML(devisList);
    });
  }

  generatePrintHTML(devisList: Devis[]): void {
    const printWindow = window.open("", "_blank", "width=900,height=700");
    if (!printWindow) {
      alert("❌ Popup bloquée !");
      return;
    }

    const today = new Date().toLocaleDateString("fr-FR", {
      year: "numeric", month: "long", day: "numeric", hour: "2-digit", minute: "2-digit"
    });

    const totalDevis = devisList.length;
    const totalAmount = devisList.reduce((sum, d) => sum + (d.totalAmount || 0), 0);
    const totalProducts = devisList.reduce((sum, d) => sum + d.products.length, 0);
    const statusCounts = {
      draft: devisList.filter(d => d.status === 'draft').length,
      sent: devisList.filter(d => d.status === 'sent').length,
      accepted: devisList.filter(d => d.status === 'accepted').length,
      rejected: devisList.filter(d => d.status === 'rejected').length
    };

    const filters: string[] = [];
    if (this.searchTerm) filters.push(`Recherche: "${this.searchTerm}"`);
    if (this.selectedCustomer) filters.push(`Client: ${this.selectedCustomer}`);
    if (this.dateFrom) filters.push(`Date Début: ${new Date(this.dateFrom).toLocaleDateString('fr-FR')}`);
    if (this.dateTo) filters.push(`Date Fin: ${new Date(this.dateTo).toLocaleDateString('fr-FR')}`);
    if (this.minAmount !== null) filters.push(`Montant Min: ${this.minAmount} DT`);
    if (this.maxAmount !== null) filters.push(`Montant Max: ${this.maxAmount} DT`);
    if (this.statusFilter !== 'all') filters.push(`Statut: ${this.getStatusLabel(this.statusFilter)}`);
    const sortLabels: any = { date: "Date", customer: "Client", amount: "Montant" };
    filters.push(`Tri: ${sortLabels[this.sortBy]} (${this.sortOrder === "asc" ? "↑" : "↓"})`);

    const rows = devisList.map((d, i) => `
      <tr>
        <td>${i + 1}</td>
        <td>${d.quoteNumber}</td>
        <td>${this.formatDate(d.date)}</td>
        <td>${d.customer}</td>
        <td>${d.products.length}</td>
        <td><span class="badge-${d.status}">${this.getStatusLabel(d.status || 'draft')}</span></td>
        <td>${(d.totalAmount || 0).toFixed(2)} DT</td>
      </tr>
    `).join("");

    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>Liste Devis - ${today}</title>
        <style>
          @page { margin: 15mm; size: A4 landscape; }
          body { font-family: Arial, sans-serif; margin: 0; padding: 15px; font-size: 10pt; }
          .header { text-align: center; margin-bottom: 15px; border-bottom: 2px solid #8b5cf6; padding-bottom: 10px; }
          .header h1 { font-size: 20pt; color: #8b5cf6; margin: 0 0 5px 0; }
          .filters { background: #f5f3ff; padding: 8px; margin-bottom: 12px; border-left: 3px solid #8b5cf6; }
          .filters h3 { font-size: 11pt; margin: 0 0 5px 0; }
          .filters ul { list-style: none; padding: 0; margin: 0; }
          .filters li { font-size: 9pt; margin: 2px 0; }
          .stats { display: grid; grid-template-columns: repeat(4, 1fr); gap: 8px; margin-bottom: 15px; }
          .stat { background: #f9fafb; border: 1px solid #e5e7eb; padding: 8px; text-align: center; }
          .stat .label { font-size: 8pt; color: #666; }
          .stat .value { font-size: 14pt; font-weight: bold; color: #8b5cf6; }
          table { width: 100%; border-collapse: collapse; }
          thead { background: #8b5cf6; color: white; }
          th, td { padding: 6px 8px; text-align: left; border: 1px solid #ddd; font-size: 9pt; }
          tbody tr:nth-child(even) { background: #f9fafb; }
          tfoot { background: #f5f3ff; font-weight: bold; }
          .badge-draft { background: #f3f4f6; color: #374151; padding: 2px 6px; border-radius: 3px; }
          .badge-sent { background: #dbeafe; color: #1e40af; padding: 2px 6px; border-radius: 3px; }
          .badge-accepted { background: #d1fae5; color: #065f46; padding: 2px 6px; border-radius: 3px; }
          .badge-rejected { background: #fee2e2; color: #991b1b; padding: 2px 6px; border-radius: 3px; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>📄 Devis - Liste</h1>
          <p>Date d'impression : ${today}</p>
        </div>
        <div class="filters">
          <h3>Filtres Appliqués</h3>
          <ul>${filters.map(f => `<li>• ${f}</li>`).join("")}</ul>
        </div>
        <div class="stats">
          <div class="stat"><div class="label">Total Devis</div><div class="value">${totalDevis}</div></div>
          <div class="stat"><div class="label">Total Produits</div><div class="value">${totalProducts}</div></div>
          <div class="stat"><div class="label">Montant Total</div><div class="value">${totalAmount.toFixed(2)} DT</div></div>
          <div class="stat"><div class="label">Acceptés</div><div class="value">${statusCounts.accepted}</div></div>
        </div>
        <table>
          <thead>
            <tr><th>#</th><th>N° Devis</th><th>Date</th><th>Client</th><th>Produits</th><th>Statut</th><th>Montant</th></tr>
          </thead>
          <tbody>${rows}</tbody>
          <tfoot>
            <tr><td colspan="4">TOTAL (${totalDevis} devis)</td><td>${totalProducts}</td><td>-</td><td>${totalAmount.toFixed(2)} DT</td></tr>
          </tfoot>
        </table>
      </body>
      </html>
    `;

    printWindow.document.write(html);
    printWindow.document.close();
    printWindow.focus();
    setTimeout(() => printWindow.print(), 500);
  }

  printItem(item: any): void {
    this.filteredDevis$.pipe(take(1)).subscribe(devisList => {
      const devis = devisList.find(d => d.id === item.id);
      if (!devis) return;
      
      const printWindow = window.open("", "_blank", "width=800,height=600");
      if (!printWindow) return;

      const html = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <title>Devis ${devis.quoteNumber}</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            h1 { text-align: center; border-bottom: 2px solid #000; }
            table { width: 100%; border-collapse: collapse; margin: 15px 0; }
            th, td { padding: 8px; border: 1px solid #ddd; }
            th { background: #f3f4f6; }
          </style>
        </head>
        <body>
          <h1>Devis N° ${devis.quoteNumber}</h1>
          <table>
            <tr><th>Date</th><td>${this.formatDate(devis.date)}</td></tr>
            <tr><th>Client</th><td>${devis.customer}</td></tr>
            ${devis.validUntil ? `<tr><th>Valide jusqu'au</th><td>${this.formatDate(devis.validUntil)}</td></tr>` : ''}
            <tr><th>Statut</th><td>${this.getStatusLabel(devis.status || 'draft')}</td></tr>
          </table>
          <h3>Produits</h3>
          <table>
            <thead>
              <tr><th>Produit</th><th>Quantité</th><th>Prix Unit.</th><th>Sous-total</th></tr>
            </thead>
            <tbody>
              ${devis.products.map(p => `
                <tr>
                  <td>${p.productName}</td>
                  <td>${p.quantity}</td>
                  <td>${p.unitPrice.toFixed(2)} DT</td>
                  <td>${p.subtotal.toFixed(2)} DT</td>
                </tr>
              `).join("")}
            </tbody>
            <tfoot>
              <tr><th colspan="3">Total</th><th>${(devis.totalAmount || 0).toFixed(2)} DT</th></tr>
            </tfoot>
          </table>
        </body>
        </html>
      `;
      
      printWindow.document.write(html);
      printWindow.document.close();
      setTimeout(() => {
        printWindow.print();
        printWindow.close();
      }, 250);
    });
  }
}
