import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { FormsModule } from '@angular/forms';
import { Observable, BehaviorSubject, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { Timestamp } from '@angular/fire/firestore';
import { EntryVoucher } from "../../models/entry-voucher";
import { EntryVoucherService } from '../../services/entry-voucher.service';
import { ProductsService } from '../../services/products.service';
import { Product } from '../../models/product';

@Component({
  selector: 'app-entry-voucher',
  templateUrl: './entry-voucher.component.html',
  styleUrls: ['./entry-voucher.component.scss'],
  imports: [ReactiveFormsModule, CommonModule, FormsModule],
  standalone: true
})
export class EntryVoucherComponent implements OnInit {
  vouchers$!: Observable<EntryVoucher[]>;
  filteredVouchers$!: Observable<EntryVoucher[]>;
  products$!: Observable<Product[]>;
  voucherForm: FormGroup;
  isLoading = false;
  isEditing = false;
  editingId: string | null = null;
  errorMessage = '';
  searchTerm = '';
  searchTerm$ = new BehaviorSubject<string>('');
  showForm = false;

  constructor(
    private voucherService: EntryVoucherService,
    private productsService: ProductsService,
    private fb: FormBuilder,
    private router: Router
  ) {
    this.voucherForm = this.fb.group({
      date: [new Date().toISOString().split('T')[0], Validators.required],  // Date input (YYYY-MM-DD)
      supplier: ['', Validators.required],
      productId: ['', Validators.required],
      quantity: [1, [Validators.required, Validators.min(1)]],
      unitPrice: [0, [Validators.required, Validators.min(0.01)]],
      status: ['pending', Validators.required],
      notes: ['']
    });
  }

  ngOnInit(): void {
    this.loadVouchers();
    this.products$ = this.productsService.getProducts();
    this.filteredVouchers$ = combineLatest([
      this.vouchers$,
      this.searchTerm$
    ]).pipe(
      map(([vouchers, term]) => vouchers.filter(v =>
        v.supplier.toLowerCase().includes(term.toLowerCase()) ||
        v.productName.toLowerCase().includes(term.toLowerCase())
      ))
    );
  }

  loadVouchers(): void {
    this.vouchers$ = this.voucherService.getEntryVouchers();
  }

  onSearchChange(term: string): void {
    this.searchTerm = term;
    this.searchTerm$.next(term);
  }

  onSubmit(): void {
    if (this.voucherForm.invalid) {
      this.errorMessage = 'Veuillez remplir tous les champs obligatoires.';
      return;
    }
    this.isLoading = true;
    this.errorMessage = '';
    const formValue = this.voucherForm.value;
    
    // Convert date string to Timestamp
    const voucherData = {
      ...formValue,
      date: Timestamp.fromDate(new Date(formValue.date)),
      productName: this.getProductName(formValue.productId),  // Récupère nom produit
      total: formValue.quantity * formValue.unitPrice
    };
    
    if (this.isEditing && this.editingId) {
      this.voucherService.updateEntryVoucher(this.editingId, voucherData).then(() => {
        this.resetForm();
        this.loadVouchers();
      }).catch(err => {
        this.errorMessage = 'Erreur lors de la modification du bon.';
        console.error('Update error:', err);
      }).finally(() => this.isLoading = false);
    } else {
      this.voucherService.addEntryVoucher(voucherData).then(() => {
        this.resetForm();
        this.loadVouchers();
      }).catch(err => {
        this.errorMessage = 'Erreur lors de l\'ajout du bon.';
        console.error('Add error:', err);
      }).finally(() => this.isLoading = false);
    }
  }

  editVoucher(voucher: EntryVoucher): void {
    this.isEditing = true;
    this.editingId = voucher.id || null;
    const dateStr = (voucher.date as Timestamp).toDate().toISOString().split('T')[0];
    this.voucherForm.patchValue({ ...voucher, date: dateStr });
    this.showForm = true;
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }

  deleteVoucher(id: string, supplier: string): void {
    if (confirm(`Supprimer le bon du fournisseur "${supplier}" ?`)) {
      this.isLoading = true;
      this.voucherService.deleteEntryVoucher(id).then(() => {
        this.loadVouchers();
      }).catch(err => {
        this.errorMessage = 'Erreur lors de la suppression.';
        console.error('Delete error:', err);
      }).finally(() => this.isLoading = false);
    }
  }

  resetForm(): void {
    this.voucherForm.reset({ date: new Date().toISOString().split('T')[0], quantity: 1, unitPrice: 0, status: 'pending' });
    this.isEditing = false;
    this.editingId = null;
    this.errorMessage = '';
    this.showForm = false;
  }

  toggleForm(): void {
    this.showForm = !this.showForm;
    if (!this.showForm) {
      this.resetForm();
    }
  }

  getProductName(productId: string): string {
    let productName = '';
    this.products$.subscribe(products => {
      const product = products.find(p => p.id === productId);
      productName = product ? product.name : 'Produit inconnu';
    });
    return productName;
  }

  formatDate(timestamp: Timestamp | Date): string {
    if (timestamp instanceof Timestamp) {
      return timestamp.toDate().toLocaleDateString('fr-FR');
    }
    return new Date(timestamp).toLocaleDateString('fr-FR');
  }
}
