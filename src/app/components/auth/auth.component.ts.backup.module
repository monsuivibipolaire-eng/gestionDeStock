import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../../../services/auth.service';
import { User } from '@angular/fire/auth';
import { UserCredential } from '@angular/fire/auth';

@Component({
  selector: 'app-auth',
  templateUrl: './auth.component.html',
  styleUrls: ['./auth.component.scss']
})
export class AuthComponent implements OnInit {
  loginForm: FormGroup;
  registerForm: FormGroup;
  isLoading = false;
  errorMessage = '';
  user: User | null = null;
  showRegister = false;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router
  ) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]]
    });
    this.registerForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]]
    });
  }

  ngOnInit(): void {  // Fix TS2420 : Implements OnInit correctement
    this.authService.user$.subscribe((user: User | null) => {  // Fix TS7006 : Type user (no implicit any) ; subscribe sur Observable
      this.user = user;
      if (user) {
        this.router.navigate(['/products']);  // Redirect si logged
      }
    });
  }

  onLogin(): void {  // Fix TS2304/TS1005 : Method propre
    if (this.loginForm.invalid) {
      this.errorMessage = 'Veuillez remplir les champs correctement.';  // Multilingual ready
      return;
    }
    this.isLoading = true;
    const { email, password } = this.loginForm.value;
    this.authService.login(email, password).then((response: UserCredential) => {  // Fix TS2552 : UserCredential importÃ© ; .then sur Promise
      console.log('Logged in:', response.user?.uid);  // Fix TS2304 : Quotes "Logged in:" + ?. safe
      this.errorMessage = '';
      this.router.navigate(['/products']);  // Success redirect
    }).catch((error: any) => {  // Fix TS1005/TS2695 : .catch propre (no next/error syntax)
      console.error('Login error:', error);  // Fix quotes/TS2304
      this.errorMessage = error.message;
    }).finally(() => this.isLoading = false);
  }

  onRegister(): void {  // Fix TS2304/TS1005/TS2554 : Method propre (similaire login)
    if (this.registerForm.invalid) {
      this.errorMessage = 'Veuillez remplir les champs pour l\'inscription.';
      return;
    }
    this.isLoading = true;
    const { email, password } = this.registerForm.value;
    this.authService.register(email, password).then((response: UserCredential) => {
      console.log('Registered:', response.user?.uid);
      this.errorMessage = '';
      this.router.navigate(['/products']);
    }).catch((error: any) => {
      console.error('Register error:', error);
      this.errorMessage = error.message;
    }).finally(() => this.isLoading = false);
  }

  toggleForm(): void {
    this.showRegister = !this.showRegister;
    this.errorMessage = '';
  }
}
