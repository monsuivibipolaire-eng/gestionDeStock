import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup,  ReactiveFormsModule, Validators } from '@angular/forms';
import { FormsModule } from '@angular/forms';import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { Product } from "../../models/product";
import { ProductsService } from '../../services/products.service';

@Component({
  selector: 'app-products',
  templateUrl: './products.component.html',
  styleUrls: ['./products.component.scss'],
  imports: [ReactiveFormsModule, CommonModule, FormsModule],
  standalone: true
})
export class ProductsComponent implements OnInit {
  products$!: Observable<Product[]>;
  productForm: FormGroup;
  isLoading = false;
  isEditing = false;
  editingId: string | null = null;
  errorMessage = '';
  searchTerm = '';  // Recherche par nom/description
  showForm = false;  // Toggle form modal/inline

  constructor(
    private productsService: ProductsService,
    private fb: FormBuilder,
    private router: Router
  ) {
    this.productForm = this.fb.group({
      name: ['', Validators.required],
      price: [0, [Validators.required, Validators.min(0.01)]],
      quantity: [0, [Validators.required, Validators.min(1)]],
      description: ['']
    });
  }

  ngOnInit(): void {
    this.loadProducts();
  }

  loadProducts(): void {
    this.products$ = this.productsService.getProducts();
  }

  // Filtre produits par recherche (nom ou description ; case-insensitive)
  get filteredProducts$(): Observable<Product[]> {
    return this.products$.pipe(
      map(products => products.filter(p =>
        p.name.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
        (p.description || '').toLowerCase().includes(this.searchTerm.toLowerCase())
      ))
    );
  }

  onSubmit(): void {
    if (this.productForm.invalid) {
      this.errorMessage = 'Veuillez remplir tous les champs obligatoires correctement.';
      return;
    }
    this.isLoading = true;
    this.errorMessage = '';
    const formValue = this.productForm.value;
    
    if (this.isEditing && this.editingId) {
      // Modification
      this.productsService.updateProduct(this.editingId, formValue).then(() => {
        this.resetForm();
        this.loadProducts();
      }).catch(err => {
        this.errorMessage = 'Erreur lors de la modification du produit.';
        console.error('Update error:', err);
      }).finally(() => this.isLoading = false);
    } else {
      // Ajout
      this.productsService.addProduct(formValue).then(() => {
        this.resetForm();
        this.loadProducts();
      }).catch(err => {
        this.errorMessage = 'Erreur lors de l\'ajout du produit.';
        console.error('Add error:', err);
      }).finally(() => this.isLoading = false);
    }
  }

  editProduct(product: Product): void {
    this.isEditing = true;
    this.editingId = product.id || null;
    this.productForm.patchValue(product);
    this.showForm = true;
    window.scrollTo({ top: 0, behavior: 'smooth' });  // Scroll to form
  }

  deleteProduct(id: string, name: string): void {
    if (confirm(`Êtes-vous sûr de vouloir supprimer le produit "${name}" ?`)) {
      this.isLoading = true;
      this.productsService.deleteProduct(id).then(() => {
        this.loadProducts();
      }).catch(err => {
        this.errorMessage = 'Erreur lors de la suppression du produit.';
        console.error('Delete error:', err);
      }).finally(() => this.isLoading = false);
    }
  }

  resetForm(): void {
    this.productForm.reset({ name: '', price: 0, quantity: 0, description: '' });
    this.isEditing = false;
    this.editingId = null;
    this.errorMessage = '';
    this.showForm = false;
  }

  toggleForm(): void {
    this.showForm = !this.showForm;
    if (!this.showForm) {
      this.resetForm();
    }
  }
}
