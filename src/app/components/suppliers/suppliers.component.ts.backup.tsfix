import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { FormsModule } from '@angular/forms';
import { Observable, BehaviorSubject, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { NgSelectModule } from '@ng-select/ng-select';import { Supplier } from "../../models/supplier";
import { SuppliersService } from '../../services/suppliers.service';

@Component({
  selector: 'app-suppliers',
  templateUrl: './suppliers.component.html',
  styleUrls: ['./suppliers.component.scss'],
  imports: [ReactiveFormsModule, NgSelectModule, CommonModule, FormsModule],
  standalone: true
})
export class SuppliersComponent implements OnInit {
  suppliers$!: Observable<Supplier[]>;
  filteredSuppliers$!: Observable<Supplier[]>;
  supplierForm: FormGroup;
  isLoading = false;
  isEditing = false;
  editingId: string | null = null;
  errorMessage = '';
  selectedSupplierId: string | null = null;
  selectedSupplier$ = new BehaviorSubject<string | null>(null);
  showForm = false;

  constructor(
    private suppliersService: SuppliersService,
    private fb: FormBuilder
  ) {
    this.supplierForm = this.fb.group({
      name: ['', Validators.required],
      email: ['', [Validators.email]],
      phone: [''],
      address: [''],
      notes: ['']
    });
  }

  ngOnInit(): void {
    this.loadSuppliers();
    this.filteredSuppliers$ = combineLatest([this.suppliers$, this.selectedSupplier$]).pipe(
      map(([suppliers, term]) => suppliers.filter(s =>
        s.name.toLowerCase().includes(term.toLowerCase()) ||
        (s.email || '').toLowerCase().includes(term.toLowerCase())
      ))
    );
  }

  loadSuppliers(): void {
    this.suppliers$ = this.suppliersService.getSuppliers();
  }

  onSupplierSelect(supplierId: string | null): void {
    this.selectedSupplierId = supplierId;
    this.selectedSupplier$.next(term);
  }

  onSubmit(): void {
    if (this.supplierForm.invalid) {
      this.errorMessage = 'Veuillez remplir tous les champs obligatoires.';
      return;
    }
    this.isLoading = true;
    this.errorMessage = '';
    const formValue = this.supplierForm.value;
    
    if (this.isEditing && this.editingId) {
      this.suppliersService.updateSupplier(this.editingId, formValue).then(() => {
        this.resetForm();
        this.loadSuppliers();
      }).catch(err => {
        this.errorMessage = 'Erreur lors de la modification.';
        console.error(err);
      }).finally(() => this.isLoading = false);
    } else {
      this.suppliersService.addSupplier(formValue).then(() => {
        this.resetForm();
        this.loadSuppliers();
      }).catch(err => {
        this.errorMessage = 'Erreur lors de l\'ajout.';
        console.error(err);
      }).finally(() => this.isLoading = false);
    }
  }

  editSupplier(supplier: Supplier): void {
    this.isEditing = true;
    this.editingId = supplier.id || null;
    this.supplierForm.patchValue(supplier);
    this.showForm = true;
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }

  deleteSupplier(id: string, name: string): void {
    if (confirm(`Supprimer le fournisseur "${name}" ?`)) {
      this.isLoading = true;
      this.suppliersService.deleteSupplier(id).then(() => {
        this.loadSuppliers();
      }).catch(err => {
        this.errorMessage = 'Erreur lors de la suppression.';
        console.error(err);
      }).finally(() => this.isLoading = false);
    }
  }

  resetForm(): void {
    this.supplierForm.reset();
    this.isEditing = false;
    this.editingId = null;
    this.errorMessage = '';
    this.showForm = false;
  }

  toggleForm(): void {
    this.showForm = !this.showForm;
    if (!this.showForm) {
      this.resetForm();
    }
  }

  print(): void {
    window.print();
  }
}
